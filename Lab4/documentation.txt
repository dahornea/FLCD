https://github.com/dahornea/FLCD/tree/main/Lab4

The FiniteAutomaton class represents a finite automaton (FA) and provides methods to read its definition from a file, 
check if it is deterministic, retrieve various components, and determine if it accepts a given input sequence.

public FiniteAutomaton(string filePath)
Creates a new instance of the FiniteAutomaton class by reading the definition from the specified file.

public bool CheckIfDeterministic()
Checks if the finite automaton is deterministic, i.e., each state has at most one transition for each symbol.

public List<string> GetStates()
Returns a list of states in the finite automaton.

public string GetInitialState()
Returns the initial state of the finite automaton.

public List<string> GetAlphabet()
Returns the alphabet of the finite automaton.

public List<string> GetFinalStates()
Returns a list of final states in the finite automaton.

public Dictionary<Tuple<string, string>, HashSet<string>> GetTransitions()
Returns a dictionary representing the transitions of the finite automaton.

public string WriteTransitions()
Returns a string representation of the transitions in the finite automaton.

public bool AcceptsSequence(string sequence)
Checks if the finite automaton accepts the input sequence.

letter          ::= 'a' | 'b' | ... | 'z' | 'A' | 'B' | ... | 'Z'
specialSymbol   ::= '-' | '+'
digit           ::= '0' | '1' | ... | '9'
alphabetCharacter ::= letter | digit | specialSymbol

alphabet        ::= alphabetCharacter {. alphabetCharacter}
state           ::= letter
listOfStates    ::= state {. state}
transition      ::= state . alphabet . state
listOfTransitions ::= transition '\n' {transition '\n'}
initialState    ::= state
finalStates     ::= state {. state}
FAfile          ::= listOfStates '\n' alphabet '\n' initialState '\n' finalStates '\n' listOfTransitions
